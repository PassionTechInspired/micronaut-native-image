plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version '1.0.3'
    id "com.google.protobuf" version "0.8.13"
    id "com.google.cloud.tools.jib" version "2.5.0"
}

version "0.1"
group "com.example"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime "netty"
    testRuntime "spock2"
    processing {
        incremental true
        annotations "com.example.*"
    }
}

dependencies {
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    compileOnly("org.graalvm.nativeimage:svm")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.grpc:micronaut-grpc-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.netflix:micronaut-netflix-archaius")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.graphql:micronaut-graphql")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.nats:micronaut-nats")
    implementation("com.graphql-java-kickstart:graphql-java-tools:$graphqlJavaToolsVersion")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testImplementation(platform("org.testcontainers:testcontainers-bom:$testContainerVersion"))
    testRuntimeOnly("org.testcontainers:postgresql")
    implementation("com.github.javafaker:javafaker:$javaFakerVersion")
}

mainClassName = "com.example.Application"
java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protocVersion" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:$protocGenGrpcVersion" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}
